--- Why use TypeScript? ---
- JavaScript can feel like like a mess, and it's easy to write spaghetti code. You can write clean
JS with concepts such as the revealing module pattern, but it's still not so intuitive.
- JS provides a dynamic type system.
- The GOOD:
    -> Variables can hold any objects
    -> Types determined on the fly
    -> Implicit type coercion (e.g. string to number)
- The BAD:
    -> Difficult to ensure proper types are passed without tests
    -> Not all devs use '==='
    -> Enterprise-scale apps can have thousands of lines of code to maintain
- There are alternatives to Typescript:
    - Pure Javascript, of course
    - Coffeescript
    - Dart
- "TypeScript is a typed supderset of JavaScript that compiles to plain JavaScript." - www.typescriptlang.org

--- Keywords ---
- class: container for members such as properties and functions
- constructor: provides initializes functionality in a class
- exports: export a member from a module
- extends: extend a class or interface
- imports: import a module
- interface: defines code contract that can be implemented by types
- module / namespace: container for classes and other code
- public / private: member visibility modifiers
- ...: rest parameter syntax
- => arrow syntax used with definitions and functions
- <typeName>: <> characters used to cast/convert between types
':': separator between variable/parameter name and types

--- Code Hierarchy ---
         Module/Namespace
Interface <- Class
             Fields
           Constructor
           Properties
            Functions

--- Typing, Variables, & Functions ---
Type Inference:
var num = 2; // Type-inferred to be 'number'. Will be checked against further more
var num: number = 2; // Explicitly declared as type number
var any1; // Type could be any type (of type 'any'- base class for all types!)
var num1: number;
var num4 = num3 + 100; // Since num3 is a number, num4 is inferred to be a number
var str1 = num1 + ' some string'; // Type inference (string)
var nothappy: number = num1 + ' some string'; // no bueno

-- Ambient Declarations--
- Allows us to pull in the tyes from external libraries
declare var document;

document.title = 'Hello';
// lib.d.ts is reference by default and contains references for the DOM & JavaScript

/// <reference path ="jquery.d.ts" />
// Above is the ambient declaration for jquery

declare var $; // Provide the $ symbol for jquery, types brought in from the above declarations
var data = 'Hello Andreas';
$('div').text(data);

*.d.ts is the extension reserved for TypeScript ambient declaration files. You can get these from the
DefinitelyTyped github project, or the TyeScript CodePlex webpage.

-- Primitive Types --
- 'any' is the base class for all types in TypeScript. It can hold any kind of type- using it is just like
writing any normal object in dynamic JavaScript.
- boolean
- number (integers and floats)
- string
- arrays & indexers
    -> var names: string[] = [ 'Andreas', 'Hailu' ];
        var firstPerson: string;
        firstPerson = names[0];
- null
    -> var num: number = null
- undefined
    -> var quantity: number; // undefined
       var company = undefined; // of type 'any'
    -> subtype of all types

--- Object Types ---
- Functions, cass, module, interface, and literal types
- May contain:
    -> Properties
        -- public/private
        -- required/optional
    -> Call signatures
    -> Constructor signatures
    -> Index signatures
var square = { h: 10, w: 20 };
var points: Object = { x: 10, y: 20 };

Functions are also considered objects
var multiply = function (x: number) {
    return x * x;
}

var multiplyMore: Function; // the function type has a capital 'F'.
multipleMore = function (x: number) {
};

--- Functions ---
- Parameter type (required and optional)
- Arrow function expressions
    -> Compact form of function expressions
    -> Omit the function keyword
    -> Have scope of "this"

var myFunc = (h: number, w: number) => h * w; // Omit the function keyword, compact return statement

- Void
    -> Used as the return type for functions that return no value

--- Classes ---
class Car {
    // Fields
    // Constructor
    // Properties
    // Functions
}

class Car {
    engine: string;

    constructor(engine: string) {
        this.engine = engine;
    }

    constructor(engine: string, public horsepower: int) { // 'public' field is the shorthand means of declaring fields
        this.engine = engine;
        this.horsepower = horsepower;
    }
}

Class members are public by default
Properties act as filters and can have get/set blocks
E.g:

Class Car {
    private _engine: string;

    constructor(engine: string) {
        this.engine;
    }

    get engine(): string { // NOT A TYPO! TypeScript internally will create the getter
        return this._engine;
    }

    set engine(value: string) {
        if(!value) {
            throw 'Must supply engine!';
        }
        this._engine = value;
    }
}

Types are instantiated with the keyword "new"
var car = new Car(engine);
